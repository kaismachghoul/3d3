/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 .\public\model\Local.Glb 
*/

import React, { useRef } from "react";
import { useGLTF, PerspectiveCamera } from "@react-three/drei";
import { useLoader } from "@react-three/fiber";
import { TextureLoader } from "three";
import * as THREE from "three";
import Porte from "./Porte";

const Model = (props) => {
  const { nodes, materials } = useGLTF("public/model/Local.Glb");

  const physicWall = new THREE.MeshPhysicalMaterial();

  // const leaves = useLoader(TextureLoader, { map: "public/texture/leaves_map.jpg" , alphaMap: "public/texture/leaves_alpha.jpg"});
  let leaves_map = useLoader(TextureLoader, "texture/leaves_map.jpg");
  const leaves_alpha = useLoader(TextureLoader, "texture/leaves_alpha.jpg");
  const leaves_bumps = useLoader(TextureLoader, "texture/leaves_bump.jpg");

  const wall_map = useLoader(
    TextureLoader,
    "texture/white_plaster_02_diff_4k.jpg"
  );
  const wall_normal = useLoader(
    TextureLoader,
    "texture/white_plaster_02_nor_gl_4k.jpg"
  );
  const wall_rough = useLoader(
    TextureLoader,
    "texture/beige_wall_001_rough_4k.jpg"
  );

  leaves_map.wrapS = THREE.RepeatWrapping;
  leaves_map.wrapT = THREE.RepeatWrapping;
  leaves_map.minFilter = THREE.LinearFilter;
  leaves_map.magFilter = THREE.LinearFilter;

  leaves_alpha.wrapS = THREE.RepeatWrapping;
  leaves_alpha.wrapT = THREE.RepeatWrapping;
  leaves_alpha.minFilter = THREE.LinearFilter;
  leaves_alpha.magFilter = THREE.LinearFilter;

  leaves_bumps.wrapS = THREE.RepeatWrapping;
  leaves_bumps.wrapT = THREE.RepeatWrapping;
  leaves_bumps.minFilter = THREE.LinearFilter;
  leaves_bumps.magFilter = THREE.LinearFilter;

  wall_map.wrapS = THREE.RepeatWrapping;
  wall_map.wrapT = THREE.RepeatWrapping;
  // wall_map.minFilter = THREE.LinearFilter;
  // wall_map.magFilter = THREE.LinearFilter;

  wall_normal.wrapS = THREE.RepeatWrapping;
  wall_normal.wrapT = THREE.RepeatWrapping;
  // wall_normal.minFilter = THREE.LinearFilter;
  // wall_normal.magFilter = THREE.LinearFilter;

  wall_rough.wrapS = THREE.RepeatWrapping;
  wall_rough.wrapT = THREE.RepeatWrapping;
  // wall_rough.minFilter = THREE.LinearFilter;
  wall_rough.magFilter = THREE.LinearFilter;
  // physicWall.map = wall_map
  physicWall.normalMap = wall_normal;
  physicWall.roughness = wall_rough;
  physicWall.metalness = 1;
  physicWall.roughness = 1;

  let texturePl = materials["Mat.11"];
  texturePl.map = leaves_map;
  texturePl.alphaMap = leaves_alpha;
  texturePl.normalMap = leaves_bumps;

  let wallTexture = materials["bois-blanc"];
  wallTexture.metalness = 0.5;
  wallTexture.roughness = 7;
  wallTexture.map = wall_map;
  wallTexture.normalMap = wall_normal;
  wallTexture.roughnessMap = wall_rough;
  wallTexture.wireframe = false;
  // console.log(wallTexture);

  const groundTexture = materials["Mat.3"];
  groundTexture.metalness = 0.1;
  groundTexture.roughness = 0.5;
  // console.log(groundTexture);

  const textureRef = useRef();
  const plancherRef = useRef();
  const wallRef = useRef();
  // console.log(wallRef.current);
  // console.log(plancherRef.current);
  // console.log(textureRef.current);
  return (
    <group {...props} dispose={null} scale={0.1} position={[0, 0, -12]}>
      <group position={[-27.687, 0.029, 131.32]}>
        <mesh
          geometry={nodes.Bookshelf_001_1.geometry}
          material={materials["Mat.5"]}
          castShadow
          receiveShadow
        />
        <mesh
          geometry={nodes["Bookshelf_001-Mat12"].geometry}
          material={materials["Mat.12"]}
          castShadow
          receiveShadow
        />
        <mesh
          geometry={nodes["Bookshelf_001-Mat13"].geometry}
          material={materials["Mat.5"]}
          castShadow
          receiveShadow
        />
        <mesh
          geometry={nodes["Bookshelf_001-Mat14"].geometry}
          material={materials["Mat.5"]}
          castShadow
          receiveShadow
        />
        <mesh
          geometry={nodes["Bookshelf_001-Mat8"].geometry}
          material={materials["Mat.8"]}
        />
        <mesh
          geometry={nodes["Bookshelf_001-Mat15"].geometry}
          material={materials["Mat.15"]}
          castShadow
          receiveShadow
        />
        <mesh
          geometry={nodes["Bookshelf_001-Mat16"].geometry}
          material={materials["Mat.5"]}
          castShadow
          receiveShadow
        />
      </group>
      <group position={[-25.469, 0.026, 87.419]}>
        <mesh
          geometry={nodes["Potted_Tree_60-30_1"].geometry}
          material={nodes["Potted_Tree_60-30_1"].material}
          receiveShadow
          castShadow
        />
        <mesh
          geometry={nodes["Potted_Tree_60-30-Mat7"].geometry}
          material={materials["Mat.7"]}
          receiveShadow
          castShadow
        />
        <mesh
          geometry={nodes["Potted_Tree_60-30-Mat8"].geometry}
          material={materials["Mat.8"]}
          receiveShadow
          castShadow
        />
        <mesh
          geometry={nodes["Potted_Tree_60-30-Mat9"].geometry}
          material={materials["Mat.9"]}
          receiveShadow
          castShadow
        />
        <mesh
          geometry={nodes["Potted_Tree_60-30-Mat10"].geometry}
          material={materials["Mat.10"]}
          receiveShadow
          castShadow
        />
        <mesh
          geometry={nodes["Potted_Tree_60-30-Mat11"].geometry}
          material={texturePl}
          receiveShadow
          castShadow
        >
          {/* <meshBasicMaterial map={leaves_map} alphaMap={leaves_alpha}   /> */}
        </mesh>
      </group>
      <group position={[-13.761, 0, 145.534]}>
        <mesh
          geometry={nodes.Table_Dining_005_1.geometry}
          material={nodes.Table_Dining_005_1.material}
          castShadow
          receiveShadow
        />
        <mesh
          geometry={nodes["Table_Dining_005-Mat2"].geometry}
          material={materials["Mat.2"]}
          receiveShadow
          castShadow
        />
        <mesh
          geometry={nodes["Table_Dining_005-Mat5"].geometry}
          material={materials["Mat.5"]}
          receiveShadow
          castShadow
        />
      </group>
      <group position={[-25.3, 0.019, 146.001]}>
        <mesh
          geometry={nodes.Sofa_002_1.geometry}
          material={nodes.Sofa_002_1.material}
          castShadow
          receiveShadow
        />
        <mesh
          geometry={nodes["Sofa_002-Mat4"].geometry}
          material={materials["Mat.4"]}
          castShadow
          receiveShadow
        />
        <mesh
          geometry={nodes["Sofa_002-Mat"].geometry}
          material={materials.Mat}
          castShadow
          receiveShadow
        />
        <mesh
          geometry={nodes["Sofa_002-Mat2"].geometry}
          material={materials["Mat.2"]}
          castShadow
          receiveShadow
        />
      </group>
      <group position={[-13.769, 0, 132.871]}>
        <mesh
          geometry={nodes.Armchair_0061_1.geometry}
          material={nodes.Armchair_0061_1.material}
          castShadow={true}
          receiveShadow
        />
        <mesh
          geometry={nodes["Armchair_0061-Mat4"].geometry}
          material={materials["Mat.4"]}
          castShadow={true}
          receiveShadow
        />
        <mesh
          geometry={nodes["Armchair_0061-Mat"].geometry}
          material={materials.Mat}
          castShadow={true}
          receiveShadow
        />
        <mesh
          geometry={nodes["Armchair_0061-Mat2"].geometry}
          material={materials["Mat.2"]}
          castShadow={true}
          receiveShadow
        />
      </group>
      <group position={[-13.769, 0, 158.242]}>
        <mesh
          geometry={nodes.Armchair_006_1.geometry}
          material={nodes.Armchair_006_1.material}
          castShadow={true}
          receiveShadow
        />
        <mesh
          geometry={nodes["Armchair_006-Mat4"].geometry}
          material={materials["Mat.4"]}
          castShadow={true}
          receiveShadow
        />
        <mesh
          geometry={nodes["Armchair_006-Mat"].geometry}
          material={materials.Mat}
          castShadow={true}
          receiveShadow
        />
        <mesh
          geometry={nodes["Armchair_006-Mat2"].geometry}
          material={materials["Mat.2"]}
          castShadow={true}
          receiveShadow
        />
      </group>
      <group position={[-10.685, 8.675, 124.725]}>
        <mesh
          geometry={nodes["Layer0-Metal_mtl"].geometry}
          material={nodes["Layer0-Metal_mtl"].material}
          castShadow
          receiveShadow
        />
        <mesh
          geometry={nodes["Layer0-Mat3"].geometry}
          material={groundTexture}
          receiveShadow={true}
          ref={plancherRef}
          castShadow
        />
        <mesh
          geometry={nodes["Layer0-bois-blanc"].geometry}
          
          material={physicWall}
          castShadow={true}
          receiveShadow
          ref={wallRef}
        />
      </group>
      <group position={[-29.07, 15.804, 143.99]}>
        <mesh
          geometry={nodes["frame-Art_1"].geometry}
          material={materials["Art 1"]}
        />
        <mesh
          geometry={nodes["frame-Back_Side_Material"].geometry}
          material={materials["Back Side Material"]}
        />
        <mesh
          geometry={nodes["frame-Plastic"].geometry}
          material={materials.Plastic}
        />
      </group>
      <group position={[-8.185, 16.909, 83.258]}>
        <mesh
          geometry={nodes["frame1-Mat17"].geometry}
          material={materials["Mat.17"]}
        />
        <mesh
          geometry={nodes["frame1-Back_Side_Material"].geometry}
          material={materials["Back Side Material"]}
        />
        <mesh
          geometry={nodes["frame1-Plastic"].geometry}
          material={materials.Plastic}
        />
      </group>
      <perspectiveCamera
        makeDefault={false}
        // far={100}
        // near={1}
        // fov={33}
        position={[8.968, 11.892, 161.812]}
        rotation={[10, 0.487, 0]}
      />
      <Porte />
    </group>
  );
};

useGLTF.preload("public/model/Local.Glb");
export default Model;
